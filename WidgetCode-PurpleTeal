
// Feel free to send any questions/suggestions to my Instagram: @ben.tastic_

// Version 1.0.0
// Coming soon (maybe): Image backgrounds

/* ---------------------- */
/* Customize your widget! */
/* ---------------------- */

// Feel free to edit these example schedules however you want, or even create your own! Just make sure that every schedule has the DAY START and DAY END values, the widget needs these to run correctly.

//Purple Days
var purpleOdd = {
  "DAY START":"0:00",
  "Period 1":"7:25",
  "Period 3":"9:10",
  "Lunch":"11:05",
  "Period 5":"12:35",
  "Period 7":"13:32",
  "School End":"14:31",
  "DAY END":"24:00"
}
var purpleEven = {
  "DAY START":"0:00",
  "Period 2":"7:25",
  "Period 4":"9:10",
  "Lunch":"11:05",
  "Period 6":"12:35",
  "Period 8":"13:32",
  "School End":"14:31",
  "DAY END":"24:00"
}
var purpleWed = {
  "DAY START":"0:00",
  "Period 5":"9:10",
  "Period 6":"10:20",
  "Lunch":"11:35",
  "Period 7":"12:05",
  "Period 8":"13:15",
  "School End":"14:31",
  "DAY END":"24:00"
}

//Teal Days
var tealOdd = {
  "DAY START":"0:00",
  "Period 5":"7:25",
  "Period 7":"9:10",
  "Lunch":"11:05",
  "Period 1":"12:35",
  "Period 3":"13:32",
  "School End":"14:31",
  "DAY END":"24:00"
}
var tealEven = {
  "DAY START":"0:00",
  "Period 6":"7:25",
  "Period 8":"9:10",
  "Lunch":"11:05",
  "Period 2":"12:35",
  "Period 4":"13:32",
  "School End":"14:31",
  "DAY END":"24:00"
}
var tealWed = {
  "DAY START":"0:00",
  "Period 1":"9:10",
  "Period 2":"10:20",
  "Lunch":"11:35",
  "Period 3":"12:05",
  "Period 4":"13:15",
  "School End":"14:31",
  "DAY END":"24:00"
}

// Set each schedule here, but make sure you write the exact names that you set for the schedule variables. The weekend should be kept at null.

var purpleDayTypes = {
  0:null, //Sunday
  1:purpleOdd, //Monday
  2:purpleEven, //Tuesday
  3:purpleWed, //Wednesday
  4:purpleOdd, //Thursday
  5:purpleEven, //Friday
  6:null //Saturday
};

var tealDayTypes = {
  0:null, //Sunday
  1:tealOdd, //Monday
  2:tealEven, //Tuesday
  3:tealWed, //Wednesday
  4:tealOdd, //Thursday
  5:tealEven, //Friday
  6:null //Saturday
};

// Set the widget colors! Use any hex code you'd like.

var widgetConfig = {
  "WeekendLeftColor":"#d21404",
  "WeekendRightColor":"#3a0002",
  "WeekendTextColor":"#ffffff",
  
  "tealBeforeAfterColor":"#88888",
  "tealBeforeAfterText":"#3aafa9",
  
  "purpleBeforeAfterColor":"#88888",
  "purpleBeforeAfterText":"#ba55d3",
  
  "tealClassLeftColor":"#3aafa9",
  "tealClassRightColor":"#17252a",
  "tealClassTextColor":"#ffffff",
  
  "purpleClassLeftColor":"#ba55d3",
  "purpleClassRightColor":"#311432",
  "purpleClassTextColor":"#ffffff"
}


// END OF CUSTOMIZATION

/* ------------------- */
/* Find Current Period */
/* ------------------- */

const today = new Date();

const firstTeal = new Date("April 5, 2021")
var weeksPast = (today - firstTeal)/604800000;

var currentWeek = "purple";
if (weeksPast >= 0 && Math.floor(weeksPast % 2) == 0) {
  currentWeek = "teal";
}

if (currentWeek == "purple") {  
  var TodaySchedule = purpleDayTypes[today.getDay()];
} else {
  var TodaySchedule = tealDayTypes[today.getDay()];
}

var classes = [];
var periods = [];

function dateFromTime(time) {
  let splitText = time.split(':');
  let date = new Date();
  date.setHours(splitText[0],splitText[1],0);
  return date;
}

for (i in TodaySchedule) {
 classes.push(dateFromTime(TodaySchedule[i]));
  periods.push(i);
}

var currentPeriod;

for (i in classes) {
  if (i !== 0 && today >= classes[i-1] && today <= classes[i]) {
    currentPeriod = i-1;
    break;
  }
}


/* --------------- */
/* Draw Background */
/* --------------- */

function drawBackground(percentage, leftColor, rightColor) {
  const size = new Size(200,200);
  const c = new DrawContext();
  c.size = size
  c.respectScreenScale = true
  
  c.setFillColor(new Color(rightColor))
  c.fill(new Rect(0,0,size.width,size.height))
  
  c.setFillColor(new Color(leftColor))
  c.fill(new Rect(0,0,size.width*percentage,size.height))
  return c.getImage();
}

var relativeDate = new RelativeDateTimeFormatter()
var formatDate = new DateFormatter()
formatDate.useNoDateStyle()
formatDate.useShortTimeStyle()

var extraSpacer = 0

/* ----------------- */
/* Set Widget Params */
/* ----------------- */

if (TodaySchedule === null) {
  
  // Runs on weekends
  
  if (today.getDay() === 0) {var back=1;var fwrd=0;} else {var back=0;var fwrd=1;}
  var start = (new Date()).setHours(0,0,0)
  var end = (new Date()).setHours(24,0,0)
  start = new Date(start-(24*3600*1000*back))
  end = new Date(end+(24*3600*1000*fwrd))
  
  var percentage = ((today-start)/60000) / ((end-start)/60000);
  
  var topText = formatDate.string(today)
  var topColor = widgetConfig["WeekendTextColor"]
  var bigText = "Weekend"
  var bigColor = widgetConfig["WeekendTextColor"]
  var smallText = "Ends " +relativeDate.string(end, today)
  var smallColor = widgetConfig["WeekendTextColor"]
  var background = drawBackground(percentage, widgetConfig["WeekendLeftColor"], widgetConfig["WeekendRightColor"])
  
} else if (periods[currentPeriod] == "DAY START") {
  
  // Runs at start of day
  
  var topText = formatDate.string(today)
  var topColor = widgetConfig[currentWeek+"BeforeAfterText"]
  var bigText = "School starts"
  var bigColor = widgetConfig[currentWeek+"BeforeAfterText"]
  var smallText = relativeDate.string(classes[currentPeriod+1], today)
  var smallColor = widgetConfig[currentWeek+"BeforeAfterText"]
  var background = drawBackground(0,widgetConfig[currentWeek+"BeforeAfterColor"],widgetConfig[currentWeek+"BeforeAfterColor"])
  
} else if (periods[currentPeriod+1] == "DAY END") {
  
  //Runs at end of day
  
  var topText = formatDate.string(today)
  var topColor = widgetConfig[currentWeek+"BeforeAfterText"]
  var bigText = "School's over!"
  var bigColor = widgetConfig[currentWeek+"BeforeAfterText"]
  var smallText = ""
  var smallColor = widgetConfig[currentWeek+"BeforeAfterText"]
  var background = drawBackground(0,widgetConfig[currentWeek+"BeforeAfterColor"],widgetConfig[currentWeek+"BeforeAfterColor"])
  var extraSpacer = 10
  
} else {
  
  //Runs between regular periods
  
  var percentage = ((today-classes[currentPeriod])/60000) / ((classes[currentPeriod+1]-classes[currentPeriod])/60000)
  
  var topText = formatDate.string(classes[currentPeriod]) + " - " + formatDate.string(classes[currentPeriod+1])
  var topColor = widgetConfig[currentWeek+"ClassTextColor"]
  var bigText = periods[currentPeriod]
  var bigColor = widgetConfig[currentWeek+"ClassTextColor"]
  var smallText = "Ends "+relativeDate.string(classes[currentPeriod+1], today)
  var smallColor = widgetConfig[currentWeek+"ClassTextColor"]
  var background = drawBackground(percentage, widgetConfig[currentWeek+"ClassLeftColor"], widgetConfig[currentWeek+"ClassRightColor"])
  
}

/* --------------- */
/* Assemble Widget */
/* --------------- */

let w = new ListWidget()
  w.backgroundImage = background
  w.addSpacer(0 + extraSpacer)
  let topTxt = w.addText(topText)
  topTxt.textColor = new Color(topColor);
  topTxt.font = Font.semiboldRoundedSystemFont(8)
  w.addSpacer(2)
  let titleTxt = w.addText(bigText)
  titleTxt.textColor = new Color(bigColor);
  titleTxt.font = Font.boldRoundedSystemFont(24)
  w.addSpacer(3)
  if (smallText !== "") {w.addSpacer(5)}
  let subTxt = w.addText(smallText)
  subTxt.textColor = new Color(smallColor)
  subTxt.textOpacity = 1
  subTxt.font = Font.mediumRoundedSystemFont(18)

if (!config.runsInWidget) {
  w.presentSmall()
}

Script.setWidget(w)
